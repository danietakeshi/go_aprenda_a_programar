
##Curso Go - Aprenda a Programar

## Capítulo 9 - Exercícios nível 4

1) Usando uma literal composta:
     - Crie um array que suporte 5 valores to tipo int
     - Atribua valores aos seus índices
	 - Utilize range e demonstre os valores do array.
	 - Utilizando format printing, demonstre o tipo do array.
Resposta: https://play.golang.org/p/QwUilfJBR6-

2) Usando uma literal composta:
     - Crie uma slice de tipo int
     - Atribua 10 valores a ela
	 - Utilize range para demonstrar todos estes valores.
	 - E utilize format printing para demonstrar seu tipo.
Resposta: https://play.golang.org/p/Iltkwp41pYB

3) Utilizando como base o exercício anterior, utilize slicing para demonstrar os valores:
     - Do primeiro ao terceiro item do slice (incluindo o terceiro item!)
     - Do quinto ao último item do slice (incluindo o último item!)
     - Do segundo ao sétimo item do slice (incluindo o sétimo item!)
     - Do terceiro ao penúltimo item do slice (incluindo o penúltimo item!)
     - Desafio: obtenha o mesmo resultado acima utilizando a função len() para determinar o penúltimo item
Resposta: https://play.golang.org/p/UmtUjrzDhdO

4) Começando com a seguinte slice:
     - x := []int{42, 43, 44, 45, 46, 47, 48, 49, 50, 51}
	 - Anexe a ela o valor 52;
	 - Anexe a ela os valores 53, 54 e 55 utilizando uma única declaração;
	 - Demonstre a slice;
	 - Anexe a ela a seguinte slice:
		- y := []int{56, 57, 58, 59, 60}
	 - Demonstre a slice x
Resposta: https://play.golang.org/p/R-3IEsCOVzv

5) Comece com essa slice:
     - x := []int{42, 43, 44, 45, 46, 47, 48, 49, 50, 51}
	 - Utilizando slicing e append, crie uma slice y que contenha os valores:
     - [42, 43, 44, 48, 49, 50, 51]
Resposta: https://play.golang.org/p/ycOl_BMXjWq

6) Crie uma slice usando make que possa conter todos os estados do Brasil.
     - Os estados: "Acre", "Alagoas", "Amapá", "Amazonas", "Bahia", "Ceará", "Espírito Santo", "Goiás", "Maranhão", "Mato Grosso", "Mato Grosso do Sul", "Minas Gerais", "Pará", "Paraíba", "Paraná", "Pernambuco", "Piauí", "Rio de Janeiro", "Rio Grande do Norte", "Rio Grande do Sul", "Rondônia", "Roraima", "Santa Catarina", "São Paulo", "Sergipe", "Tocantins"
	 - Demonstre o len e cap da slice.
	 - Demonstre todos os valores da slice *sem utilizar range.*
Resposta: https://play.golang.org/p/qHMyyj5_qmS

7) Crie uma slice contendo slices de strings ([][]string). Atribua valores a este slice multi-dimensional da seguinte maneira:
     - "Nome", "Sobrenome", "Hobby favorito"
	 - Inclua dados para 3 pessoas, e utilize range para demonstrar estes dados
Resposta: https://play.golang.org/p/htGRuyJ5-wb

8) Crie um map com key tipo string e value tipo []string.
     - Key deve conter nomes no formato sobrenome_nome
     - Value deve conter os hobbies favoritos da pessoa
	 - Demonstre todos esses valores e seus índices
Respota: https://play.golang.org/p/ki6ifuqccPc

9 e 10) Utilizando o exercício anterior, adicione uma entrada ao map e demonstre o map inteiro utilizando range.
Resposta: https://play.golang.org/p/pCqhrY9HggK

## Capítulo 11 - Exercícios nível 5

1) Crie um tipo "pessoa" com tipo subjacente struct, que possa conter os seguintes campos:
     - Nome
     - Sobrenome
     - Sabores favoritos de sorvete
	 - Crie dois valores do tipo "pessoa" e demonstre estes valores, utilizando range na slice que contem os sabores de sorvete.
Resposta: https://play.golang.org/p/V2lPo18o4ZM

2) Utilizando a solução anterior, coloque os valores do tipo "pessoa" num map, utilizando os sobrenomes como key.
	 - Demonstre os valores do map utilizando range.
	 - Os diferentes sabores devem ser demonstrados utilizando outro range, dentro do range anterior.
Resposta: https://play.golang.org/p/wCuDc6jiUTT

3) Crie um novo tipo: veículo
     - O tipo subjacente deve ser struct
     - Deve conter os campos: portas, cor
	 - Crie dois novos tipos: caminhonete e sedan
     - Os tipos subjacentes devem ser struct
     - Ambos devem conter "veículo" como struct embutido
     - O tipo caminhonete deve conter um campo bool chamado "traçãoNasQuatro"
     - O tipo sedan deve conter um campo bool chamado "modeloLuxo"
	 - Usando os structs veículo, caminhonete e sedan:
     - Usando composite literal, crie um valor de tipo caminhonete e dê valores a seus campos
     - Usando composite literal, crie um valor de tipo sedan e dê valores a seus campos
	 - Demonstre estes valores.
	 - Demonstre um único campo de cada um dos dois.
Resposta: https://play.golang.org/p/0U6z1LU1IOk

4) Crie e use um struct anônimo.
	 - Desafio: dentro do struct tenha um valor de tipo map e outro do tipo slice.
Resposta: https://play.golang.org/p/i2E-J4yoFE0
	 
	 
## Capítulo 12 - Aula 9 - Exercícios
Resposta: https://play.golang.org/p/jnA9FTzCYon


## Capítulo 15 - Exercícios nível 7

1) Crie um valor e atribua-o a uma variável.
	- Demonstre o endereço deste valor na memória.
Resposta: https://play.golang.org/p/AxPX8NR975Y

2) Crie um struct "pessoa"
	- Crie uma função chamada mudeMe que tenha *pessoa como parâmetro. Essa função deve mudar um valor armazenado no endereço *pessoa.
	- Dica: a maneira "correta" para fazer dereference de um valor em um struct seria (*valor).campo
	- Mas consta uma exceção na documentação. Link: https://golang.org/ref/spec#Selectors
	- "As an exception, if the type of x is a named pointer type and (*x).f is a valid selector expression denoting a field (but not a method), 
	- → x.f is shorthand for (*x).f." ←
	- Ou seja, podemos usar tanto o atalho p1.nome quanto o tradicional (*p1).nome
	- Crie um valor do tipo pessoa;
	- Use a função mudeMe e demonstre o resultado.
Resposta: https://play.golang.org/p/T83yXDjQLbz
	 

## Capítulo 17 - Exercícios nível 8

1) Partindo do código abaixo, utilize marshal para transformar []user em JSON.
	 - https://play.golang.org/p/U0jea43X55
	 - Atenção! Tem pegadinha aqui.
Resposta: https://play.golang.org/p/DbizKafeRNg

2) Partindo do código abaixo, utilize unmarshal e demonstre os valores.
     - https://play.golang.org/p/b_UuCcZag9
Resposta: https://play.golang.org/p/c91w3AHUm-k

3) Partindo do código abaixo, utilize NewEncoder() e Encode() para enviar as informações como JSON para Stdout.
     - https://play.golang.org/p/BVRZTdlUZ_
	 - Desafio: descubra o que é, e utilize, method chaining para conectar os dois métodos acima.
Resposta: https://play.golang.org/p/hHFQIeDIHOW

4) Partindo do código abaixo, ordene a []int e a []string.
     - https://play.golang.org/p/H_q75mpmHW
Resposta: https://play.golang.org/p/Ig3g-RPkLtp

5) Partindo do código abaixo, ordene os []user por idade e sobrenome.
     - https://play.golang.org/p/BVRZTdlUZ_
	 - Os valores no campo Sayings devem ser ordenados tambem, e demonstrados de maneira esteticamente harmoniosa.
Resposta: https://play.golang.org/p/cg1mSoZVc7A
